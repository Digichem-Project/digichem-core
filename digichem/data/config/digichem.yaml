# Master silico config file. Uncomment and change options here to affect everyone.
#
# Options for controlling the appearance of simulated UV-Vis like absorption spectra.
# required: False
#absorption_spectrum:
#   Set to False to disable image rendering.
#   type: wrapper_type, default: True, required: False
#  enable_rendering: true
#    
#   The method used to set the min/max limits of the Y axis.
#   Possible options are:
#     - 'auto': Limits are set automatically so all peaks are clearly visible.
#     - a list of [y_min, y_max], where y_min is the most negative value on the Y axis, and y_max is
#    the most positive value on the Y axis (both in oscillator strength).
#   type: wrapper_type, default: auto, required: False
#  y_limits: auto
#    
#   The method used to set the min/max limits of the X axis.
#   Possible options are:
#     - 'auto': Limits are set automatically so all peaks are clearly visible.
#     - a list of [x_min, x_max], where x_min is the most negative value on the X axis, and x_max is
#    the most positive value on the X axis (both in nm).
#   type: wrapper_type, default: auto, required: False
#  x_limits: auto
#    
#   The maximum image width in pixels.
#   Absorption graphs will grow/shrink their width to fit available data, keeping a constant scale 
#   (constant pixels to nm ratio) but only up to this maximum.
#   To disable the maximum width, set to null.
#   type: wrapper_type, default: 1200, required: False
#  max_width: 1200
#    
#   The minimum oscillator strength that a peak must have to be shown in the graph, as a fraction 
#   ofthe highest peak.
#   Set to 0 for no cutoff (all peaks shown), which may results in the graph being extended well 
#   beyond the drawn peaks (because many peaks are too small to see).
#   This option has no effect when using manual x limits.
#   type: wrapper_type, default: 0.01, required: False
#  peak_cutoff: 0.01
#    
#   The amount (in nm) to extend the x axis past the highest/lowest energy peak.
#   type: wrapper_type, default: 40, required: False
#  x_padding: 40
#    
#   The full-width at half-maximum; changes how wide the drawn peaks are. Note that the choice of 
#   peak width is essentially arbitrary; only the peak height is given by calculation. Units are eV.
#   type: wrapper_type, default: 0.4, required: False
#  fwhm: 0.4
#    
#   The minimum y value to plot using the Gaussian function (controls how close to the x axis we 
#   draw the gaussian) as a fraction of the max peak height.
#   type: wrapper_type, default: 0.001, required: False
#  gaussian_cutoff: 0.001
#    
#   The spacing between x values to plot using the Gaussian function, in eV. Values that are too 
#   large will result in 'curves' made up of a series of straight edges.
#   type: wrapper_type, default: 0.01, required: False
#  gaussian_resolution: 0.01
#    
#   Whether or not to use the jacobian transformation to correctly scale the y-axis (see J. Phys. 
#   Chem. Lett. 2014, 5, 20, 3497)
#   type: wrapper_type, default: True, required: False
#  use_jacobian: true
#    
#   Whether to plot vertical bars for each excited state.
#   type: wrapper_type, default: True, required: False
#  plot_bars: true
#    
#   Whether to plot individual Gaussian functions for each excited state.
#   type: wrapper_type, default: False, required: False
#  plot_peaks: false
#    
#   Whether to plot the sum of all Gaussian functions (most closely simulates a real spectrum).
#   type: wrapper_type, default: True, required: False
#  plot_cumulative_peak: true
#    
# The default alignment method to use, MIN: minimal, FAP: furthest atom pair, AA: average angle, 
# AAA: advanced average angle.
# default: MIN, choices: ['MIN', 'FAP', 'AA', 'AAA'], required: False
#alignment: MIN
#  
# The default angle units to use, deg: degrees, rad: radians.
# default: deg, choices: ['deg', 'rad'], required: False
#angle_units: deg
#  
# A list of database configs.
# type: wrapper_type, list_type: list, default: [<silico.config.silico.Database_config object at 
# 0x7f668619f970>], required: False
#databases:
#- name: main
#  path: ~/.silico/silico.main.db
#  
# Options for controlling the appearance of simulated emission spectra. 'emission_spectrum' and 
# 'absorption_spectrum 'take the same options.
# required: False
#emission_spectrum:
#   Set to False to disable image rendering.
#   type: wrapper_type, default: True, required: False
#  enable_rendering: true
#    
#   The method used to set the min/max limits of the Y axis.
#   Possible options are:
#     - 'auto': Limits are set automatically so all peaks are clearly visible.
#     - a list of [y_min, y_max], where y_min is the most negative value on the Y axis, and y_max is
#    the most positive value on the Y axis (both in oscillator strength).
#   type: wrapper_type, default: auto, required: False
#  y_limits: auto
#    
#   The method used to set the min/max limits of the X axis.
#   Possible options are:
#     - 'auto': Limits are set automatically so all peaks are clearly visible.
#     - a list of [x_min, x_max], where x_min is the most negative value on the X axis, and x_max is
#    the most positive value on the X axis (both in nm).
#   type: wrapper_type, default: auto, required: False
#  x_limits: auto
#    
#   The maximum image width in pixels.
#   Absorption graphs will grow/shrink their width to fit available data, keeping a constant scale 
#   (constant pixels to nm ratio) but only up to this maximum.
#   To disable the maximum width, set to null.
#   type: wrapper_type, default: 1200, required: False
#  max_width: 1200
#    
#   The minimum oscillator strength that a peak must have to be shown in the graph, as a fraction 
#   ofthe highest peak.
#   Set to 0 for no cutoff (all peaks shown), which may results in the graph being extended well 
#   beyond the drawn peaks (because many peaks are too small to see).
#   This option has no effect when using manual x limits.
#   type: wrapper_type, default: 0.01, required: False
#  peak_cutoff: 0.01
#    
#   The amount (in nm) to extend the x axis past the highest/lowest energy peak.
#   type: wrapper_type, default: 40, required: False
#  x_padding: 40
#    
#   The full-width at half-maximum; changes how wide the drawn peaks are. Note that the choice of 
#   peak width is essentially arbitrary; only the peak height is given by calculation. Units are eV.
#   type: wrapper_type, default: 0.4, required: False
#  fwhm: 0.4
#    
#   The minimum y value to plot using the Gaussian function (controls how close to the x axis we 
#   draw the gaussian) as a fraction of the max peak height.
#   type: wrapper_type, default: 0.001, required: False
#  gaussian_cutoff: 0.001
#    
#   The spacing between x values to plot using the Gaussian function, in eV. Values that are too 
#   large will result in 'curves' made up of a series of straight edges.
#   type: wrapper_type, default: 0.01, required: False
#  gaussian_resolution: 0.01
#    
#   Whether or not to use the jacobian transformation to correctly scale the y-axis (see J. Phys. 
#   Chem. Lett. 2014, 5, 20, 3497)
#   type: wrapper_type, default: True, required: False
#  use_jacobian: true
#    
#   Whether to plot vertical bars for each excited state.
#   type: wrapper_type, default: True, required: False
#  plot_bars: true
#    
#   Whether to plot individual Gaussian functions for each excited state.
#   type: wrapper_type, default: False, required: False
#  plot_peaks: false
#    
#   Whether to plot the sum of all Gaussian functions (most closely simulates a real spectrum).
#   type: wrapper_type, default: True, required: False
#  plot_cumulative_peak: true
#    
# Options that control the appearance of excited states energy diagrams.
# required: False
#excited_states_diagram:
#   Set to False to disable image rendering.
#   type: wrapper_type, default: True, required: False
#  enable_rendering: true
#    
#   The method used to set the min/max limits of the Y axis.
#   Possible options are:
#     - 'all': Limits are set so all excited states are visible.
#     - 'auto': Limits are set automatically so the lowest excited state of each multiplicity is 
#   clearly visible (S1, D1, T1, Q1... N1 etc).
#     - a list of [y_min, y_max], where y_min is the most negative value on the Y axis, and y_max is
#    the most positive value on the Y axis (both in eV).
#   type: wrapper_type, default: all, required: False
#  y_limits: all
#    
#   Whether or not to show the dE(ST) label.
#   type: wrapper_type, default: True, required: False
#  show_dest: true
#    
# Options specifying paths to various external programs that silico may use. If no path is given, 
# then these programs will simply be executed by name (so relying on OS path resolution to find the 
# necessary executables, which is normally fine.)
# required: False
#external:
#   Gaussian's formchk utility https://gaussian.com/formchk/
#   default: formchk, required: False
#  formchk: formchk
#    
#   Gaussian's cubegen utility https://gaussian.com/cubegen/
#   default: cubegen, required: False
#  cubegen: cubegen
#    
# Options for controlling the appearance of simulated IR like vibrational frequency spectra.
# required: False
#IR_spectrum:
#   Set to False to disable image rendering.
#   type: wrapper_type, default: True, required: False
#  enable_rendering: true
#    
#   The method used to set the min/max limits of the Y axis.
#   Possible options are:
#     - 'auto': Limits are set automatically so all peaks are clearly visible.
#     - a list of [y_min, y_max], where y_min is the most negative value on the Y axis, and y_max is
#    the most positive value on the Y axis (both in km/mol).
#   type: wrapper_type, default: auto, required: False
#  y_limits: auto
#    
#   The method used to set the min/max limits of the X axis.
#   Possible options are:
#     - 'auto': Limits are set automatically so all peaks are clearly visible.
#     - a list of [x_min, x_max], where x_min is the most negative value on the X axis, and x_max is
#    the most positive value on the X axis (both in cm-1).
#   type: wrapper_type, default: auto, required: False
#  x_limits: auto
#    
#   The full-width at half-maximum; changes how wide the drawn peaks are. Note that the choice of 
#   peak width is essentially arbitrary; only the peak height is given by calculation. Units are 
#   cm-1.
#   type: wrapper_type, default: 80, required: False
#  fwhm: 80
#    
#   The maximum image width in pixels.
#   IR spectra will grow/shrink their width to fit available data, keeping a constant scale 
#   (constant pixels to nm ratio) but only up to this maximum.
#   To disable the maximum width, set to null.
#   type: wrapper_type, default: 1500, required: False
#  max_width: 1500
#    
#   The minimum y value to plot using the Gaussian function (controls how close to the x axis we 
#   draw the gaussian) as a fraction of the max peak height.
#   type: wrapper_type, default: 0.001, required: False
#  gaussian_cutoff: 0.001
#    
#   The spacing between x values to plot using the Gaussian function, in eV. Values that are too 
#   large will result in 'curves' made up of a series of straight edges.
#   type: wrapper_type, default: 1.0, required: False
#  gaussian_resolution: 1.0
#    
# Options relating to output of error messages. Note that the final logging level is determined by 
# combining both 'log_level' and 'verbose', so a 'log_level' of 'OFF' and 'verbose' of '2' is equal 
# to 'ERROR'.
# required: False
#logging:
#   The level of messages to output, one of OFF (no logging at all), CRITICAL (fewest messages), 
#   ERROR, WARNING, INFO or DEBUG (most messages)
#   default: INFO, choices: ['OFF', 'CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG'], required: 
#   False
#  log_level: INFO
#    
#   Increase the verbosity of the program by this amount. Each integer increase of verbosity will 
#   increase 'log_level' by 1 degree.
#   type: wrapper_type, default: 0, required: False
#  verbose: 0
#    
#   Whether to print output from render engines.
#   type: wrapper_type, default: False, required: False
#  render_logging: false
#    
# Options for controlling simulated NMR spectra
# required: False
#nmr:
#   Set to False to disable image rendering.
#   type: wrapper_type, default: True, required: False
#  enable_rendering: true
#    
#   Discard J coupling that is below this threshold (in Hz)
#   type: wrapper_type, default: 1, required: False
#  coupling_filter: 1
#    
#   The full-width at half-maximum; changes how wide the drawn peaks are. Note that the choice of 
#   peak width is essentially arbitrary; only the peak height is given by calculation. Units are 
#   ppm.
#   type: wrapper_type, default: 0.01, required: False
#  fwhm: 0.01
#    
#   The minimum y value to plot using the Gaussian function (controls how close to the x axis we 
#   draw the gaussian) as a fraction of the max peak height.
#   type: wrapper_type, default: 0.001, required: False
#  gaussian_cutoff: 0.001
#    
#   The spacing between x values to plot using the Gaussian function, in ppm. Values that are too 
#   large will result in 'curves' made up of a series of straight edges.
#   type: wrapper_type, default: 0.001, required: False
#  gaussian_resolution: 0.001
#    
#   The frequency to run the simulated spectrometer at. Larger values will result in narrower 
#   coupling. Units are MHz
#   type: wrapper_type, default: 100, required: False
#  frequency: 100
#    
#   The threshold within which similar peaks will be merged together, before they are split by 
#   coupling. This option typically results in faster execution, but more error, compared to 
#   post_merge. Units in ppm.
#   type: wrapper_type, default: 0.01, required: False
#  pre_merge: 0.01
#    
#   The threshold within which similar peaks will be merged together. Units in ppm.
#   type: wrapper_type, required: False
#  post_merge: null
#    
#   The chemical shift of a standard reference peak (in ppm) to use to adjust the spectrum. One for 
#   each element.
#   type: wrapper_type, default: B: 111.27199999999999
#   C: 197.90316666666664
#   F: 183.2779999999999
#   H: 31.68766666666667
#   P: 290.8630000000001
#   , required: False
#  standards: 'B: 111.27199999999999
#    C: 197.90316666666664
#    F: 183.2779999999999
#    H: 31.68766666666667
#    P: 290.8630000000001
#    '
#    
#   Whether to plot vertical bars for each NMR shift
#   type: wrapper_type, default: False, required: False
#  plot_bars: false
#    
#   Whether to plot vertical bars for each NMR shift in zoomed spectra
#   type: wrapper_type, default: True, required: False
#  plot_zoom_bars: true
#    
#   Isotope specific options. Each key should consist of a tuple of (proton_number, isotope).
#   type: wrapper_type, default: 11B:
#     frequency: 128.3
#   13C:
#     frequency: 100.6
#   19F:
#     frequency: 376.5
#   1H:
#     coupling_filter: 0.001
#     frequency: 400
#     fwhm: 0.005
#     gaussian_resolution: 0.0005
#     pre_merge: 0.0005
#   31P:
#     frequency: 162.0
#   , required: False
#  isotopes: "11B:\n  frequency: 128.3\n13C:\n  frequency: 100.6\n19F:\n  frequency:\
#    \ 376.5\n1H:\n  coupling_filter: 0.001\n  frequency: 400\n  fwhm: 0.005\n  gaussian_resolution:\
#    \ 0.0005\n  pre_merge: 0.0005\n31P:\n  frequency: 162.0\n"
#    
# Options that control the appearance of orbital energy diagrams.
# required: False
#orbital_diagram:
#   Set to False to disable image rendering.
#   type: wrapper_type, default: True, required: False
#  enable_rendering: true
#    
#   The method used to set the min/max limits of the Y axis.
#   Possible options are:
#     - 'all': Limits are set so all orbitals are visible.
#     - 'auto': Limits are set automatically so the 0 point (ie, 'X' axis), HOMO and LUMO are 
#   clearly visible.
#     - 'center': Like 'auto' except the lower limit is set more negative so the HOMO-LUMO are 
#   closer to the middle of the diagram.
#     - a list of [y_min, y_max], where y_min is the most negative value on the Y axis, and y_max is
#    the most positive value on the Y axis (both in eV).
#   type: wrapper_type, default: auto, required: False
#  y_limits: auto
#    
#   If True, black lines are drawn around the boarder of the diagram. If False, a line is drawn for 
#   the Y axis but not for the other 3 sides of the diagram.
#   type: wrapper_type, default: False, required: False
#  full_axis_lines: false
#    
# Options for controlling the appearance of 3D molecule images.
# required: False
#render:
#   Set to False to disable image rendering.
#   type: wrapper_type, default: True, required: False
#  enable_rendering: true
#    
#   The rendering engine to use
#   default: batoms, choices: ['vmd', 'batoms'], required: False
#  engine: batoms
#    
#   VMD specific options (only applies if engine == 'vmd'
#   required: False
#  vmd:
#     Path to the VMD (Visual Molecular Dynamics) executable
#     default: vmd, required: False
#    executable: vmd
#      
#     The tachyon ray-tracing library, performs the actual rendering. Tachyon is typically packaged 
#     with VMD, but often isn't added to the path automatically
#     default: tachyon, required: False
#    tachyon: tachyon
#      
#     The render/display mode, changes the appearance of rendered molecules/orbitals.
#     Possible options are:
#      pastel: The default style, uses light, pastel-ish colours for orbitals with low transparency.
#      Normal atom colours.
#      light-pastel: Similar to pastel, but with lighter orbital colours.
#      dark-pastel: Similar to pastel, but with darker orbital colours, reminiscant of the 'sharp' 
#     style.
#      sharp: Orbitals are darkly coloured around their edge but have high transparency in their 
#     center. Normal atom colours.
#      gaussian: A style attempting to mimic that of GaussView.
#      vesta: A style attempting to mimic that of VESTA.
#     default: pastel, choices: ['pastel', 'light-pastel', 'dark-pastel', 'sharp', 'gaussian', 
#     'vesta'], required: False
#    rendering_style: pastel
#      
#   Beautiful Atoms/Blender specific options (only applies if engine == 'batoms'
#   required: False
#  batoms:
#     Path to the blender executable, in which beautiful atoms should be installed
#     required: False
#    blender: null
#      
#     The number of CPUs/threads to use. This option is overridden if running in a calculation 
#     environemnt (where it uses the same number of CPUs as the calculation did)
#     type: wrapper_type, default: 1, required: False
#    cpus: 1
#      
#     The number of render samples (or passes) to use. Higher values result in higher image quality 
#     and greater render times
#     type: wrapper_type, default: 256, required: False
#    render_samples: 256
#      
#     The perspective mode
#     default: orthographic, choices: ['orthographic', 'perspective'], required: False
#    perspective: orthographic
#      
#   If True, previously created files will be reused. If False, new images will rendered, replacing 
#   the old.
#   This is on by default for 3D rendered images because they are expensive (time-consuming) to 
#   render.
#   type: wrapper_type, default: True, required: False
#  use_existing: true
#    
#   Whether to enable  automatic cropping of excess whitespace around the border of generated 
#   images.  If False, overall image rendering is likely to take less time, but molecules may only 
#   occupy a small portion of the true image.
#   type: wrapper_type, default: True, required: False
#  auto_crop: true
#    
#   The target resolution for rendered images. Higher values will increase image quality, at the 
#   cost of increased render time and file size.
#   type: wrapper_type, default: 512, required: False
#  resolution: 512
#    
#   Specific options for orbital density plots.
#   required: False
#  orbital:
#     The size of grid used to generate cube files.
#     Densities are plotted on a 3D grid of points, this option controls how many points there are 
#     in the grid (per dimension).
#     In addition to an integer number of points (~100 is often sufficient), any of the following 
#     keywords can also be specified:
#     Tiny, Small, Medium, Large, Huge or Default.
#     type: wrapper_type, default: Default, required: False
#    cube_grid_size: Default
#      
#     The isovalue to use for rendering orbital density.
#     type: wrapper_type, default: 0.02, required: False
#    isovalue: 0.02
#      
#   Specific options for spin density plots.
#   required: False
#  spin:
#     The size of the grid use to plot cube data. As cubes of this type are rendered with a smaller 
#     isovalue, it is often necessary to use a larger grid size than normal to maintain quality.
#     type: wrapper_type, default: Large, required: False
#    cube_grid_size: Large
#      
#     The isovalue to use for plotting spin density.
#     type: wrapper_type, default: 0.0004, required: False
#    isovalue: 0.0004
#      
#   Specific options for total density plots.
#   required: False
#  density:
#     The size of the grid use to plot cube data.
#     type: wrapper_type, default: Large, required: False
#    cube_grid_size: Large
#      
#     The isovalue to use for plotting total density.
#     type: wrapper_type, default: 0.02, required: False
#    isovalue: 0.02
#      
#   Specific options for excited states difference density plots.
#   required: False
#  difference_density:
#     The size of the grid use to plot cube data.
#     type: wrapper_type, default: Default, required: False
#    cube_grid_size: Default
#      
#     The isovalue to use for difference density plots.
#     type: wrapper_type, default: 0.001, required: False
#    isovalue: 0.001
#      
#   Specific options for NTO plots.
#   required: False
#  natural_transition_orbital:
#     The size of the grid use to plot cube data.
#     type: wrapper_type, default: Default, required: False
#    cube_grid_size: Default
#      
#     The isovalue to use for NTO plots.
#     type: wrapper_type, default: 0.02, required: False
#    isovalue: 0.02
#      
#   Specific options for permanent dipole moment plots.
#   required: False
#  dipole_moment:
#     The value (x) to scale the TDM by, where 1 D = x Å.
#     type: wrapper_type, default: 1.0, required: False
#    scaling: 1.0
#      
#   Specific options for transition dipole moment plots.
#   required: False
#  transition_dipole_moment:
#     The value (x) to scale the TEDM by, where 1 D = x Å.
#     type: wrapper_type, default: 5.0, required: False
#    electric_scaling: 5.0
#      
#     The value (x) to scale the TMDM by, where 1 au = x Å.
#     type: wrapper_type, default: 10.0, required: False
#    magnetic_scaling: 10.0
#      
# Options for controlling the generation of calculation reports.
# required: False
#report:
#   The image to use for the front page of the report.
#   default: rendered, choices: ['skeletal', 'rendered'], required: False
#  front_page_image: rendered
#    
#   Options that control the running of Turbomole calculations to generate cube files from completed
#    calculations. Note that when reports are created automatically following calculation completion
#    these options will be overridden with the specifics of that calculation.
#   required: False
#  turbomole:
#     The number of CPUs with which to run.
#     type: wrapper_type, default: 1, required: False
#    num_cpu: 1
#      
#     The amount of memory with which to run.
#     type: wrapper_type, default: 1GB, required: False
#    memory: 1GB
#      
#     A program definition from the internal library to run.
#     type: type_func, required: False
#    program: null
#      
#   Options that control the running of Gaussian calculations to generate NTO cube files from 
#   completed calculations. Note that when reports are created automatically following calculation 
#   completion these options will be overridden with the specifics of that calculation.
#   required: False
#  gaussian:
#     The number of CPUs with which to run.
#     type: wrapper_type, default: 1, required: False
#    num_cpu: 1
#      
#     The amount of memory with which to run.
#     type: wrapper_type, default: 1GB, required: False
#    memory: 1GB
#      
#     A program definition from the internal library to run.
#     type: type_func, required: False
#    program: null
#      
#     Path to the top of the scratch directory.
#     default: /scratch, required: False
#    scratch_path: /scratch
#      
#   Options that control the running of orca_plot to generate cube files from completed 
#   calculations. Note that when reports are created automatically following calculation completion 
#   these options will be overridden with the specifics of that calculation.
#   required: False
#  orca:
#     The amount of memory with which to run. If left blank, no maximum will be specified.
#     type: wrapper_type, required: False
#    memory: null
#      
#     A program definition from the internal library to run.
#     type: type_func, required: False
#    program: null
#      
#   Whether to delete intermediate files that are written during the report generation process.
#   Intermediate files include:
#      - .cube files.
#      - .fchk files.
#      - .html files.
#      - .css files.
#   Note that this option will only delete new files written by the program; existing files given by
#    the user are never deleted.
#   type: wrapper_type, default: True, required: False
#  cleanup: true
#    
#   Options which control how many orbitals to print in the MO table.
#   These numbers are relative to the HOMO for both the min and max.
#   null can be specified for either/both the min/max to print all available orbitals in that 
#   direction.
#   If both alpha and beta orbitals are available (for unrestricted calculations, for example), then
#    additional orbitals may be printed outside of the given min/max to ensure the given value is 
#   met for both sets of orbitals. This is common for triplet calculations, where the alpha and beta
#    frontier MOs are at different levels.
#   Examples:
#     min: -10, max: 16: From HOMO-10 to LUMO+15 inclusive (total of 27 orbitals).
#     min: null, max: 11: All orbitals with energy less than or equal to LUMO+10.
#     min: 0, max: 1: HOMO and LUMO only.
#   required: False
#  orbital_table:
#     The highest orbital to show in the molecular orbital table.
#     type: wrapper_type, default: 16, required: False
#    max: 16
#      
#     The lowest orbital to show in the molecular orbital table.
#     type: wrapper_type, default: -15, required: False
#    min: -15
#      
#   Options which specify which orbitals to render 3D images of. The default is the HOMO and LUMO.
#   Orbitals can be specified by level (an index starting at 1 for the most negative orbital, useful
#    if you want images of a particular orbital) and/or by distance from the HOMO (useful for more 
#   day-to-day operation.
#   In addition, excited_state_transition_threshold: can be used to add orbitals that are involved 
#   in an excited state transition with a probability above a certain threshold.
#   Duplicates will be automatically ignored, as will orbitals specified here that are not actually 
#   available in the calculation result file.
#   Alpha and beta are set separately. Beta will be ignored if there are no beta orbitals available.
#    
#   Example:
#      orbital_levels:
#        - 5
#      orbital_distance:
#        - -1
#        - 0
#        - 1
#      excited_state_transition_threshold: 0.1
#      Would render orbital 5, HOMO-1, HOMO, LUMO and any orbitals involved in an excited state 
#   transition with a probability 0.1 or greater.
#   required: False
#  orbital_image:
#     Include orbitals involved in an excited state transition with a probability of this value or 
#     greater.
#     type: wrapper_type, default: 0.1, required: False
#    et_transition_threshold: 0.1
#      
#     Include normal/alpha orbitals by level.
#     type: wrapper_type, list_type: list, required: False
#    orbital_levels: []
#      
#     Include beta orbitals by level.
#     type: wrapper_type, list_type: list, required: False
#    beta_levels: []
#      
#     Include normal/alpha orbitals by distance from the HOMO.
#     type: wrapper_type, list_type: list, default: [0, 1], required: False
#    orbital_distances:
#    - 0
#    - 1
#      
#     Include beta orbitals by distance from the HOMO.
#     type: wrapper_type, list_type: list, default: [0, 1], required: False
#    beta_distances:
#    - 0
#    - 1
#      
#   Options that control how many vibrational frequencies to list in the frequencies table. 
#   required: False
#  frequency_table:
#     The most negative frequency to show in the table (remember that frequencies can be negative). 
#     'null' is for no limit. Units are cm-1.
#     type: wrapper_type, required: False
#    min_frequency: null
#      
#     The most positive frequency to show in the table. 'null' is for no limit. Units are cm-1.
#     type: wrapper_type, required: False
#    max_frequency: null
#      
#     The maximum number of frequencies to show in the table.
#     type: wrapper_type, required: False
#    max_num: null
#      
#   Options which specify which NMR spectra to render.
#   required: False
#  nmr_image:
#     If True, at least one experiment will be included for each element and isotope pair (for which
#      NMR data is available). If no expt is explicitly requested (via codes), then the spectra will
#      be the one with the least decoupling.
#     type: wrapper_type, default: True, required: False
#    auto: true
#      
#     Explicitly include certain NMR experiments.
#     type: wrapper_type, list_type: list, default: ['13C{1H}'], required: False
#    codes:
#    - 13C{1H}
#      
# Options for controlling the rendering of 2D skeletal images.
# required: False
#skeletal_image:
#   The resolution for rendered images
#   required: False
#  resolution:
#     The output resolution (x and y) in pixels
#     type: wrapper_type, required: False
#    absolute: null
#      
#     The output resolution (x and y) in multiples of the length of the molecule
#     type: wrapper_type, default: 100, required: False
#    relative: 100
#      